---
title: "Instructions to set up the Portfolio template"
format: html
---

<!-- Make sure to delete or replace the info in this qmd file since it is only here for your initial isntructions and not needed for your actual portfolio. make sure to edit or remove the _quarto.yml for this qmd file, if you decide to remove make sure you also delete the instructions.qmd file. You can also delete any file related to this qmd in the docs folder but it is not needed. You can also delete the docs folder and render website. rendering website will re generate the docs folder. -->

# Instructions to editing this Portfolio

The main goal of this instructions is focused around editing the \_quarto.yml and the process of pushing to github for the site to render. If you follow the steps below on adding new files and editing the \_quarto.yml your site should always render. I do not focus to much on the QMD details as that is one of the main concepts we have been working on in class. So you can edit the QMD files as you see fit, and as long as they render locally, they will be published to the site.

[Go to Potential Errors and Bugs](#potential-errors-and-or-bugs)

The following are instructions to edit this portfolio separated into sections. Each section is intended to show how to add and or edit different parts of the portfolio.

# Using this template and or cloning to a new device

**Step 1**\
- Go to the template ([GitHub Portfolio Template](https://github.com/byui-math-dept/Portfolio_Template)), and select "Use as template." - Name it and set it to public. - Go to **Settings \> Pages**, and configure:\
- Branch: `main`\
- Folder: `docs`\
- Hit save and watch it go live.

**Step 2**\
- Create the R project for this portfolio.\
- Make an edit, render the site, and push to make sure you are connected to your portfolio:\
`git remote show origin` *(use in Terminal)*\
- Once you push to GitHub and the site is successfully built using GitHub Pages, you have successfully created your portfolio.

**Step 3**\
- I have steps with videos on how to add new tabs and edit the YAML file.\
- I mostly focused on the YAML code and preparing the website. The main thing about your portfolio is to show what you are capable of. This portfolio is all set up for you to do as you want with your `.qmd` files, and once rendered locally, they will push to the site. So go all out.

<iframe width="560" height="315" src="https://www.youtube.com/embed/o4PJpgCnzT4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

**Step 4** *(if using Python code, optional)*\
If you are not planning on using Python code, you can do this later. If you are planning on using Python code, then do the following:

1.  Open the `python.qmd` file and remove the `#` from the ```` ```{python} ```` so RStudio recognizes the Python chunks.\

2.  In the instructions for the video "Working with Python…part 1," follow and only do steps 1 to 1.7 (watch the first video). Watch the beginning of the second video until I get to the part about installing Python code, just so you understand more about environments and Python code.\

3.  Once you have done steps 1 to 1.9 and have an environment successfully loaded, run the following code to install the Python libraries in the `requirements.txt` file:

    -   Check for environment loaded:\
        `library(reticulate)`\
        `py_config()`

    -   Load environment if needed:\
        `library(reticulate)`\
        `use_virtualenv("env", required = TRUE)`

    -   Run to install Python libraries in `requirements.txt` file:\
        `shell("pip install -r requirements.txt")`

4.  Render the `python.qmd` file, and you should be set to run Python code within RStudio.

5.  When installing new Python libraries (edit library names as needed):\
    `library(reticulate)`\
    `py_install(c("pandas", "numpy", "matplotlib"))`

6.  After installing new Python libraries, update the `requirements.txt` file:\
    `shell("pip freeze > requirements.txt")`

<iframe width="560" height="315" src="https://www.youtube.com/embed/Q2hNXMCIJlM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/4uiqgaS5KyM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

# Adding a New Tab

**Adding a new tab to the portfolio.** I’m adding a resume.

1.  In the `_quarto.yml` file add, under the navbar, and this two lines of code\
    `text: "My Resume"`\
    `file: resume.qmd`

2.  Add/create the `resume.qmd` file to the root folder

    -   Render the `resume.qmd` file

3.  Update yml links

    -   Build \> render website

4.  Push to GitHub and the site should be updated with your new tab.

<iframe width="560" height="315" src="https://www.youtube.com/embed/3b-PdI4lhbc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

# Adding a Project Tab with Multiple Files

Step 1:\
Adding a tab with a sidebar for multiple QMD files\
- Add tab code to navbar and sidebar code to `_quarto.yml`

Step 2:\
- Add QMD for the main tab\
- Add a folder with QMD files for the main tab

<iframe width="560" height="315" src="https://www.youtube.com/embed/ansNLTE6yms" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

# Working with Python Code & Environment in R-Studio

Part 4. Working with Python code, environment, and `requirements.txt` files in R-Studio

**Step 1:** Check what environment is active (likely a global environment)\
`library(reticulate)`\
`py_config()`

**Step 1.5:** Create a virtual environment if needed (basically needed in any new device)\
`library(reticulate)`\
`virtualenv_create("env")` \# env can be any name you want

**Step 1.7:** Load environment for the project if needed. Use the code from Step 1 to make sure the new environment is loaded. If not, use this to load the new environment. Replace `env` with the actual name of your environment.\
`library(reticulate)`\
`use_virtualenv("env", required = TRUE)`

**Step 2:** Install Python libraries\
`library(reticulate)`\
`py_install(c("pandas", "numpy", "matplotlib"))`

**Step 2.1:** Run Python code/file and render Python files

**Step 3:** Create/update the `requirements.txt` file\
`shell("pip freeze > requirements.txt")`

<iframe width="560" height="315" src="https://www.youtube.com/embed/rrsIChN1H1c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/gvebioDsuAg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>

# Potential Errors and Bugs

**Any errors and or bugs you have with no solution for, please [make a new issue for this repository](https://github.com/byui-math-dept/DS350-website-template/issues).**


      
-     Make sure to include the error message and what you were doing when the error occurred.
-     screenshots of the error will help


**Operating Systems: windows, MAc, Linux**

        
-   The instructions for this portfolio are based on a Windows operating system. If you are using a Mac or Linux, you may need to adjust the instructions accordingly.

-   Instructions that apply to Mac and Linux are coming soon but not available as of 12/10/2024.

-   Everything is about the same, but the code use in the console and or terminal may be different.

  -   Ai can probably provide some help if you provide the windows code and ask it to give it to you for mac/linux. Make sure you specify what you are doing. (eg: I'm using this in R studio for a site project and I have this code that goes in the r console but for windows ... code... what is the equivalent for mac/linux)

